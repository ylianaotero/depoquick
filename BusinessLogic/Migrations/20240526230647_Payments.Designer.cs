// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessLogic.Migrations
{
    [DbContext(typeof(DepoQuickContext))]
    [Migration("20240526230647_Payments")]
    partial class Payments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DepoQuick.Domain.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AirConditioning")
                        .HasColumnType("bit");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("DepoQuick.Domain.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("DepoQuick.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DepoQuick.Domain.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DepoQuick.Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepositId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DepoQuick.Domain.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepositId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("DepoQuick.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DepositPromotion", b =>
                {
                    b.Property<int>("DepositsId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionsId")
                        .HasColumnType("int");

                    b.HasKey("DepositsId", "PromotionsId");

                    b.HasIndex("PromotionsId");

                    b.ToTable("DepositPromotion");
                });

            modelBuilder.Entity("DepoQuick.Domain.Administrator", b =>
                {
                    b.HasBaseType("DepoQuick.Domain.User");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("DepoQuick.Domain.Client", b =>
                {
                    b.HasBaseType("DepoQuick.Domain.User");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("DepoQuick.Domain.LogEntry", b =>
                {
                    b.HasOne("DepoQuick.Domain.User", null)
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepoQuick.Domain.Payment", b =>
                {
                    b.HasOne("DepoQuick.Domain.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("DepoQuick.Domain.Promotion", b =>
                {
                    b.OwnsOne("DepoQuick.Domain.DateRange", "ValidityDate", b1 =>
                        {
                            b1.Property<int>("PromotionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("FinalDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("InitialDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("PromotionId");

                            b1.ToTable("Promotions");

                            b1.WithOwner()
                                .HasForeignKey("PromotionId");
                        });

                    b.Navigation("ValidityDate")
                        .IsRequired();
                });

            modelBuilder.Entity("DepoQuick.Domain.Rating", b =>
                {
                    b.HasOne("DepoQuick.Domain.Deposit", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DepositId");

                    b.HasOne("DepoQuick.Domain.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("DepoQuick.Domain.Reservation", b =>
                {
                    b.HasOne("DepoQuick.Domain.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepoQuick.Domain.Deposit", "Deposit")
                        .WithMany("Reservations")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DepoQuick.Domain.DateRange", "Date", b1 =>
                        {
                            b1.Property<int>("ReservationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("FinalDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("InitialDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservations");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("Client");

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("DepositPromotion", b =>
                {
                    b.HasOne("DepoQuick.Domain.Deposit", null)
                        .WithMany()
                        .HasForeignKey("DepositsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepoQuick.Domain.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepoQuick.Domain.Administrator", b =>
                {
                    b.HasOne("DepoQuick.Domain.User", null)
                        .WithOne()
                        .HasForeignKey("DepoQuick.Domain.Administrator", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepoQuick.Domain.Client", b =>
                {
                    b.HasOne("DepoQuick.Domain.User", null)
                        .WithOne()
                        .HasForeignKey("DepoQuick.Domain.Client", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepoQuick.Domain.Deposit", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DepoQuick.Domain.User", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("DepoQuick.Domain.Client", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}

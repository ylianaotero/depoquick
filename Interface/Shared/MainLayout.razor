@inherits LayoutComponentBase
@using BusinessLogic
@inject MemoryDataBase MemoryDataBase
@inject NavigationManager NavigationManager
@using DepoQuick.Domain
@using DepoQuick.Domain.Exceptions.ControllerExceptions
@using DepoQuick.Domain.Exceptions.DateRangeExceptions
@using DepoQuick.Domain.Exceptions.UserExceptions
@using Interface.Pages.Home


<PageTitle>Interface</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4">
            @*<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>*@
            <button id="btn-login" class="btn btn-outline-dark" @onclick="ShowAlert">@if (_btnLogin) { <text>Login</text> }else { <text>Logeado</text> }</button>
        </div>
        <article class="content px-4">
            @if (_click == true)
            {
                @Body     
            }
            else
            {
                <h3>Bienvenido a DEPOQUICK</h3>
                <h2>Para acceder debe registrar un administrador</h2>
                <form>
                    <div class="form-group">
                        <label for="name">Nombre:</label>
                        <input type="text" class="form-control" id="name" @bind="_name" required />
                    </div>
                    <div class="form-group">
                        <label for="email">Correo Electrónico:</label>
                        <input type="email" class="form-control" id="email" @bind-value="_email" required />
                    </div>
                    <div class="form-group">
                        <label for="password">Contraseña:</label>
                        <input type="password" class="form-control" id="password" @bind-value="_password"required />
                    </div>
                    <div class="form-group">
                        <label for="password">Ingrese nuevamente la contraseña:</label>
                        <input type="password" class="form-control" id="passwordValidation"@bind-value="_passwordValidation" required />
                    </div>
                    <br><br/>
                    <button type="submit" class="btn btn-primary" @onclick="ShowAlert">Registro</button>
                </form>
            }
        </article>
    </main>
</div>

@if (_showAlertEmptyUsersList)
    {
      <br>
       <div class="alert alert-danger" role="alert">
          ¡No hay usuarios registrados!
       </div>
      <br>
    }

@if (_showAlertWrongPassword)
    {
      <br>
       <div class="alert alert-danger" role="alert">
         ¡La contraseña es invalida!
       </div>
      <br>
    }

@code
{
    //private bool _showAlertWrongPasswordComfirmation;
    private bool _showAlertWrongPassword;
    private bool _showAlertEmptyUsersList;
    private bool _click;
    private bool _btnLogin = true;
    private Controller _controller;
    private String _name;
    private String _email;
    private String _password;
    private String _passwordValidation;
    
    protected override void OnInitialized()
    {
        _click = MemoryDataBase.GetListOfUsers().Count > 0;
    }

    
    public void Register()
    {
        _btnLogin = !_btnLogin;
        _controller = new Controller(MemoryDataBase);
        _controller.RegisterAdministrator(_name,_email,_password,_passwordValidation);
        NavigationManager.NavigateTo("/Home");
        
        //TODO: Ver los metodos de validacion de usuario
    }
    
     private void ShowAlert()
    {
        HideAllAlerts();
        if (IsValidPassword())
        {
            Register();
        }
        else
        {
            _showAlertWrongPassword = true;
        }
        if (UserCanLogin())
        {
            NavigationManager.NavigateTo("/Login");
        }
        else
        {
            _showAlertEmptyUsersList = true;
        }
    }
    
    private void HideAllAlerts()
    {
        _showAlertEmptyUsersList = false;
        _showAlertWrongPassword = false;
    }

    private bool UserCanLogin()
    {
        if (MemoryDataBase.GetListOfUsers().Count == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private bool IsValidPassword()
    {
        try
        {
            User.ValidatePasswordConfirmation(_password,_passwordValidation);
            return true;
        }
        catch (InvalidUserPasswordException invalidUserPasswordException)
        {
            return false;
        }
    }

    /*
    // Para que funcione tiene que ser static el validatePassword
    private bool IsValidPasswordConfirmation()
    {
        try
        {
            User.ValidatePasswordConfirmation(_password,_passwordValidation);
            return true;
        }
        catch (InvalidUserPasswordException invalidUserPasswordException)
        {
            return false;
        }
    }
    */
}
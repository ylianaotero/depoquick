@page "/Reject/{id:int}"
@inject Session Session
@inject DepoQuickContext DepoQuickContext
@inject NavigationManager NavigationManager
@inject ReservationController ReservationController

@using BusinessLogic
@using BusinessLogic.Exceptions.ControllerExceptions
@using DepoQuick.Domain
@using DepoQuick.Exceptions.ReservationExceptions
@using Microsoft.EntityFrameworkCore.Diagnostics
@using SQLitePCL

<html lang="es">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>

    <body>
        <h3>Rechazar reservación</h3>

        @if (_showAlertReservationNotFound)
        {
            <br>
            <div class="alert alert-danger" role="alert">
                Lo sentimos, no encontramos ningún depósito con ese ID. No podemos aprobar ni rechazar. ¡Por favor, inténtalo de nuevo!
            </div>
            <br>
        }
        
        @if (_showAlertAdminNotFound)
        {
            <br>
            <div class="alert alert-danger" role="alert">
                Lo sentimos, no encontramos ningún administrador registrado. No podemos aprobar ni rechazar. ¡Por favor, inténtalo de nuevo!
            </div>
            <br>
        }
        
        

        @if (_showAlertInvalidComment)
          {
            <br>
             <div class="alert alert-danger" role="alert">
               Comentario inválido. Debe tener menos de 300 caracteres.
             </div>
            <br>
          }

        @if (_showAlertEmptyComment)
          {
            <br>
             <div class="alert alert-danger" role="alert">
               Comentario inválido. No puede estar vacío.
             </div>
            <br>
          }

        <form>
            <div class="form-group">
                <br>
                <label>Por favor, especifique el motivo de rechazo para la reserva.</label>
                <br> 
                <textarea @bind="_comment" class="form-control" id="reservationText" name="reservationText" rows="4" cols="50"></textarea>
                <br>
            </div>
        </form>
        <button @onclick="() => RejectTheReservation()" class="btn btn-danger btn-sm">Rechazar</button>
        <button @onclick="() => CancelRejection()" class="btn btn-primary btn-sm">Cancelar</button>
    </body>
</html>


@code {
    private NavigationManager _navigationManager;
    
   // private ReservationController _reservationController;
    private Reservation _currentReservation; 

    private String _comment;
    
    private bool _showAlertReservationNotFound; 
    private bool _showAlertInvalidComment;
    private bool _showAlertEmptyComment;
    private bool _showAlertAdminNotFound; 
    
    [Parameter]
    public int Id { get; set; }
    

    protected override void OnInitialized()
    {
    //    _reservationController = new ReservationController(DepoQuickContext,Session);
        _navigationManager = NavigationManager;
        HideAllAlerts(); 
    }
    
    private void HideAllAlerts()
    {
        _showAlertReservationNotFound = false; 
        _showAlertInvalidComment = false;
        _showAlertAdminNotFound = false; 
        _showAlertEmptyComment = false; 

    }
    
    private void RejectTheReservation()
    {
        HideAllAlerts(); 
        try
        {
            _currentReservation = ReservationController.Get(Id);
            ReservationController.RejectReservation(_currentReservation, _comment);
            _navigationManager.NavigateTo("/GestionOfReservsAdmin");
        }
        catch (ReservationNotFoundException exceptionReservationNotFound)
        {
            _showAlertReservationNotFound = true;

        }
        catch (ReservationMessageHasMoreThan300CharactersException reservationMessageHasMoreThan300CharactersException)
        {
            _showAlertInvalidComment = true;
        }
        catch (ReservationWithEmptyMessageException reservationWithEmptyMessageException)
        {
            _showAlertEmptyComment = true;
        }
        catch (UserDoesNotExistException userDoesNotExistException)
        {
            _showAlertAdminNotFound = true; 
        }
        catch (ArgumentNullException argumentNullException)
        {
            _showAlertReservationNotFound = true; 
        }
    }
    
    private void CancelRejection()
    {
        _navigationManager.NavigateTo("/GestionOfReservsAdmin");
    }
    
}
    

@page "/GestionOfReservsClient"
@using BusinessLogic
@using BusinessLogic.Exceptions.ControllerExceptions
@using BusinessLogic.Exceptions.ReservationControllerExceptions
@using DepoQuick.Domain
@inject Session Session
@inject NavigationManager NavigationManager
@inject DepoQuickContext DepoQuickContext
@inject ReservationController ReservationController
@inject DepositController DepositController
@inject UserController UserController
@inject PaymentController PaymentController

<html lang="es">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>

    <body>

        <h3>¡Hola, @_client.Name! Aquí puedes revisar tus reservaciones.</h3>
    
            @if (_showAlertPrice)
            {
              <br>
               <div class="alert alert-primary" role="alert">
                <h4 class="alert-heading">¿Estás seguro?</h4>
                <p>Estas a punto de realizar el pago de la reserva</p>
                <hr>
                <input @onclick="AddPayment" type="submit" class="btn btn-primary" value="Aceptar">
              </div>
              <br>
            }
            
            @if (_showAlertInvalidDeposit)
            {
                <br>
                <div class="alert alert-danger" role="alert">
                    ¡Error, no se encuentra el deposito de la reservacion, intente de nuevo!
                    </div>
                <br>
                
            }

    <table class="table">
                <thead>
                    <tr>
                        <th>Depósito</th>
                        <th>Desde</th>
                        <th>Hasta</th>
                        <th>Estado</th>
                        <th>Comentario</th>
                        <th>Estado del Pago</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Reservation reservation in _listOfReservations)
                    {
                        <tr>
                            @{
                                int depositId = DepoQuickContext.Entry(reservation).Property<int>("DepositId").CurrentValue;
                            }
                            <td>Depósito @depositId</td>
                            <td>@reservation.Date.GetInitialDate().ToString("dd/MM/yyyy")</td>
                            <td>@reservation.Date.GetFinalDate().ToString("dd/MM/yyyy")</td>
                            @if (reservation.Status == 0)
                            {
                                <td>
                                    <button class="btn btn-secondary btn-sm">En espera</button>
                                </td>
                                <td>-</td>
                            }
                            else if (reservation.Status == 1)
                            {
                                <td>
                                    <button class="btn btn-success btn-sm">Aprobada</button>
                                </td>
                                <td>-</td>
                            } else {
                                {
                                    <td>
                                        <button class="btn btn-danger btn-sm">Rechazada</button>
                                    </td>
                                    <td>@reservation.Message</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm">Rechazada</button>
                                    </td>                                  
                                }
                            }
                            @{
                                _paymentOfReservation = GetPayment(reservation); 
                            }
                            @if (reservation.Status != -1)
                            {
                                @if (_paymentOfReservation != null)
                                {
                                    @if (_paymentOfReservation.Status == "reservado")
                                    {
                                        <td>
                                            <button class="btn btn-secondary btn-sm">Pago reservado</button>
                                        </td>
                                    
                                    }
                                    else
                                    {
                                        @if (_paymentOfReservation.Status == "capturado")
                                        {
                                            <td>
                                                <button class= "btn btn-success btn-sm">Pago Capturado</button>
                                            </td>
                                        
                                        }
                                    }
                                }
                                else 
                                {
                                    <td>
                                        <input @onclick="() => ShowAlert(reservation)"  id="wantToMakeThePayment" class="btn btn-primary" value="Pagar">
                                    </td>
                                }
                                
                            }
                            
                            @if (ReservationIsOver(reservation))
                            {
                               // if (reservation.Rating == null)
                                {
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-primary btn-sm" @onclick="(() => GoToAddRatingPage(reservation))">Añadir valoración
                                                <i class="fa fa-star"></i>
                                            </button>
                                        </div>
                                    </td>
                                }
                               // else
                                {
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-primary btn-sm" @onclick="(() => GoToEditRatingPage(reservation))">Editar valoración
                                                <i class="fa fa-star"></i>
                                            </button>
                                        </div>
                                    </td>
                                }
                                
                            }
                            
                        </tr>
                    }
                </tbody>
            </table>
    </body>
</html>




@code {
    private List<Reservation> _listOfReservations;
    private Client _client; 
    
    private Deposit _deposit; 
    private Reservation _reservation;
    

    private int _depositId;
                                
    private DateTime _initialDate;
    private DateTime _finalDate;
    private DateRange _date; 
    
    private bool _showAlertPrice;
    private bool _showAlertInvalidDeposit;
    
    
    private Payment _paymentOfReservation;
    
    private DepositController _depositController;
    
    private UserController _userController;
    
    private Session _session;
    
    protected override void OnInitialized()
    {
        _client = (Client)Session.ActiveUser;
        
        _listOfReservations = ReservationController.GetReservationsByUserId(_client.Id);
        
        HideAllAlerts(); 
    }
    
    private void HideAllAlerts()
    {
        _showAlertPrice = false;
        _showAlertInvalidDeposit = false; 
    }
    
    private Payment GetPayment(Reservation reservation)
    {
        try
        {
            HideAllAlerts(); 
            return PaymentController.Get(reservation);
        }
        catch (PaymentNotFoundException paymentNotFoundException)
        {
            return null;
        }
        
        
    }
    
    private bool ReservationIsOver(Reservation reservation)
    {
        return reservation.Status == 1 && reservation.Date.GetFinalDate() < DateTime.Now;
    }
    
    private void GoToAddRatingPage(Reservation reservation)
    {
        int reservationId = reservation.Id;
        NavigationManager.NavigateTo($"../RateReservation/{reservationId}");
    }
    
    private void GoToEditRatingPage(Reservation reservation)
    {
        int reservationId = reservation.Id;
        NavigationManager.NavigateTo($"../EditRating/{reservationId}");
    }
    
    private void ShowAlert(Reservation reservation)
    {
        HideAllAlerts(); 
        try
        {
            _reservation = reservation; 
            _showAlertPrice = true;
        }
        catch (DepositNotFoundException depositNotFoundException)
        {
            _showAlertInvalidDeposit = true; 
        }
        
    }

    private void AddPayment()
    {
        ReservationController.PayReservation(_reservation);
    }
}
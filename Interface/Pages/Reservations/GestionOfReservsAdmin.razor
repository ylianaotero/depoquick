@page "/GestionOfReservsAdmin"

@inject Session Session
@inject DepoQuickContext DepoQuickContext
@inject NavigationManager NavigationManager
@inject ReservationController ReservationController
@inject PaymentController PaymentController
@using BusinessLogic
@using BusinessLogic.Exceptions.ControllerExceptions
@using BusinessLogic.Exceptions.ReservationControllerExceptions
@using DepoQuick.Domain
@using DepoQuick.Exceptions.PaymentExceptions


<html lang="es">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>

    <body>

        <h3>Gestión de reservas</h3>

        @if (_showAlertReservationNotFound)
        {
            <br>
            <div class="alert alert-danger" role="alert">
                "Lo sentimos, no encontramos ningún depósito con ese ID. No podemos aprobar ni rechazar. ¡Por favor, inténtalo de nuevo!"
            </div>
            <br>
        }
        
        @if (_showAlertPaymentNotFound)
        {
            <br>
            <div class="alert alert-danger" role="alert">
                "Lo sentimos, no encontramos ningún pago realizado para esa reservacion. No podemos aprobar ni rechazar. ¡Por favor, inténtalo de nuevo!"
            
            </div>
            <br>
            
        }


        <table class="table">
            <thead>
            <tr>
                <th>Cliente</th>
                <th>Depósito</th>
                <th>Desde</th>
                <th>Hasta</th>
                <th>Acciones</th>
                <th>Comentario</th>
                <th>Estado del Pago</th>
            </tr>
            </thead>
            <tbody>
            @foreach (Reservation reservation in _listOfReservations)
            {
                <tr>
                    @{
                        int clientId = DepoQuickContext.Entry(reservation).Property<int>("ClientId").CurrentValue;
                        string clientName = DepoQuickContext.Clients.Find(clientId).Name;
                        
                        int depositId = DepoQuickContext.Entry(reservation).Property<int>("DepositId").CurrentValue;
                    }

                    <td>@clientName</td>
                    <td>Depósito @depositId</td>
                    <td>@reservation.Date.GetInitialDate().ToString("dd/MM/yyyy")</td>
                    <td>@reservation.Date.GetFinalDate().ToString("dd/MM/yyyy")</td>
                    
                    @{
                        GetPayment(reservation);
                    }
                    @if (reservation.Status == 0 && _paymentOfReservation != null)
                    {
                        
                        <td>
                            <button @onclick="() => ApproveReservation(reservation)" class="btn btn-success btn-sm">Aprobar</button>
                            <button @onclick="() =>  GoToRejectReservation(reservation.Id)" class="btn btn-danger btn-sm">Rechazar</button>
                        </td>

                        <td>-</td>
                    }
                    else
                    {
                        
                        @if (reservation.Status == 1)
                        {
                            <td>
                                <button class="btn btn-primary btn-sm">Aprobada</button>
                            </td>
                            <td>-</td>

                        }
                        else
                        {
                            @if (reservation.Status == -1)
                            {
                                <td>
                                    <button class="btn btn-secondary btn-sm">Rechazada</button>
                                </td>
                                <td>@reservation.Message</td>
                            }
                            else
                            {
                                <td>
                                    <button class="btn btn-secondary btn-sm">Pendiente de Pago</button>
                                </td>
                                <td>-</td>
                            }
                        }
                    }

                    
                    @if (reservation.Status == -1)
                    {
                        <td>
                            <button class="btn btn-secondary btn-sm">Rechazada</button>
                        </td>
                    }
                    else
                    {
                        
                        @if (_paymentOfReservation == null)
                        {
                            <td>
                                <button class="btn btn-secondary btn-sm">Pendiente de Pago</button>
                            </td>
                        }
                        else
                        {
                            @if (_paymentOfReservation.Status == "reservado")
                            {
                                <td>
                                    <button class="btn btn-primary btn-sm">Pago reservado</button>
                                </td>
                            }
                            else
                            {
                                @if (_paymentOfReservation.Status == "capturado")
                                {
                                    <td>
                                        <button class="btn btn-success btn-sm">Pago capturado</button>
                                    </td>
                                }
                            }
                        }
                    }                    
                </tr>
            }
            </tbody>
        </table>
    </body>
</html>

@code {
 //   ReservationController _reservationController;
    
    private NavigationManager _navigationManager;
    
    Session _session;

    DepoQuickContext _context; 
    private List<Reservation> _listOfReservations;

    private bool _showAlertReservationNotFound; 
    private bool _showAlertPaymentNotFound; 
    
    private Payment _paymentOfReservation;

    private String _comment; 
    
    protected override void OnInitialized()
    {
        _context = DepoQuickContext;
        _session = Session; 
      //  _reservationController = new ReservationController(_context, _session);
        _listOfReservations = ReservationController.GetReservations();
        _navigationManager = NavigationManager;
    
        HideAllAlerts(); 
    }

    private void HideAllAlerts()
    {
        _showAlertReservationNotFound = false;
        _showAlertPaymentNotFound = false; 

    }
    
    private void GetPayment(Reservation reservation)
    {
        try
        {
            _paymentOfReservation = PaymentController.Get(reservation);
        }
        catch (PaymentNotFoundException paymentNotFoundException)
        {
            _paymentOfReservation = null; 
        }
        
        
    }

    private void ApproveReservation(Reservation reservation)
    {
        try
        {
            ReservationController.ApproveReservation(reservation);
        }
        catch (PaymentNotFoundException paymentNotFoundException)
        {
            _showAlertPaymentNotFound = true;
        }
        catch (CannotCapturePaymentIfDoesNotHaveAnAssociatedReservation cannotCapturePaymentIfDoesNotHaveAnAssociatedReservation)
        {
            _showAlertReservationNotFound = true;
        }
        
    }

    private void GoToRejectReservation(int id)
    {
        _navigationManager.NavigateTo("/Reject/" + id);
        
    }
}
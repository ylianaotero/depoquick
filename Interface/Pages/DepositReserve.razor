@page "/DepositReserve"
@using DepoQuick.Domain
@using BusinessLogic
@using DepoQuick.Domain.Exceptions.ControllerExceptions
@using DepoQuick.Domain.Exceptions.DateRangeExceptions

<h3>Realizar reserva de un depósito</h3>

@if (showAlert)
{

  <br>
   <div class="alert alert-primary" role="alert">
    <h4 class="alert-heading">¿Estás seguro?</h4>
    <p>Estas a punto de realizar la reservación del depósito @_deposit.GetId() que tiene un costo de: $ @_deposit.CalculatePrice(_date.NumberOfDays())</p>
    <hr>
    <input @onclick="AddReservation" type="submit" class="btn btn-primary" value="Hacer reservacion">
  </div>
  <br>
}

@if (showAlertInvalidDeposit)
{
  <br>
   <div class="alert alert-danger" role="alert">
     ¡Depósito inválido, intente de nuevo!
   </div>
  <br>
}

@if (showAlertAnAdministratorCantMakeAReservation)
{
  <br>
   <div class="alert alert-danger" role="alert">
     El Administrador no puede hacer una reservación
   </div>
  <br>
}

@if (showAlertInvalidAlert)
{
  <br>
   <div class="alert alert-danger" role="alert">
     ¡Fecha inválida, la fecha inicial debe ser anterior a la fecha final!
   </div>
  <br>
}


<form action="#" method="POST">
  <div class="mb-3">
    <label for="deposit" class="form-label">Seleccionar depósito que desea reservar:</label>
    <select class="form-select" id="deposit" name="deposit" @onchange="HandleDepositChange">
      <option>Seleccionar depósito</option>
      @foreach (Deposit deposit in _listOfDeposits)
      {
        <option value="@deposit.GetId()">Depósito @deposit.GetId()</option>
      }
    </select>
  </div>

  <div class="mb-3">
    <label for="initialDate" class="form-label">Desde:</label>
    <input type="date" class="form-control" id="initialDate" name="initialDate" @bind="InitialDate">
  </div>

  <div class="mb-3">
    <label for="finalDate" class="form-label">Hasta:</label>
    <input type="date" class="form-control"  id="finalDate" name="finalDate" @bind="FinalDate">
  </div>
  
  <input @onclick="ShowAlert"  id="wantToMakeTheReservation" class="btn btn-primary" value="Hacer reservacion">
</form>



@code {
  private Controller _controller;
  private List<Deposit> _listOfDeposits;

  private bool showAlert = false;
  private bool showAlertInvalidDeposit = false; 
  private bool showAlertInvalidAlert = false;
  private bool showAlertAnAdministratorCantMakeAReservation = false; 
  
  private Deposit _deposit = null; 
  private Client _client;
  private DateRange _date;

  private DateTime _initialDate = DateTime.Today.Date;
  private DateTime _finalDate = DateTime.Today.Date;
  
  
  protected override void OnInitialized()
  {
    _controller = new Controller();
    _listOfDeposits = _controller.GetListOfDeposits(); 
    
  }

  private DateTime InitialDate
  {
    get => _initialDate;
    set {
      HideAllAlerts();
      _initialDate = value; 

    }
  }
  
  private DateTime FinalDate
  {
    get => _finalDate;
    set {
      HideAllAlerts();
      _finalDate = value; 

    }
  }

  private void ShowAlert()
  {
    HideAllAlerts(); 
    try
    {
      _date = new DateRange(_initialDate, _finalDate); 
      if(_deposit == null)
      {
        showAlertInvalidDeposit = true; 
      }
      else
      {
        
        showAlert = true; 
      }

    }
    catch (InvalidDateRangeException invalidDateRangeException)
    {
      showAlertInvalidAlert = true;
    }

  }

  private void HideAllAlerts()
  {
    showAlert = false;
    showAlertInvalidDeposit = false; 
    showAlertInvalidAlert = false;
    showAlertAnAdministratorCantMakeAReservation = false; 
  }
  
  private void HandleDepositChange(ChangeEventArgs args)
  {
    HideAllAlerts(); 
    if (!string.IsNullOrEmpty(args.Value.ToString()))
    {
        int id = int.Parse(args.Value.ToString());
        try
        {
          _deposit = _controller.GetDeposit(id);
        }
        catch (ExceptionDepositNotFound exceptionDepositNotFound)
        {
          showAlertInvalidDeposit = true; 
        }
        
    }
  }

  private void AddReservation()
  {
    //if (_controller.GetUser().IsAdministrator())
    //{
    _client = (Client)_controller.GetUser();
    Reservation newReservation = new Reservation(_deposit,  _client , _date); 
   // }
    
  }
  
}
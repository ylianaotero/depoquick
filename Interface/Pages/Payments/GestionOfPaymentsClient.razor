@page "/GestionOfPaymentsClient"
@using BusinessLogic
@using BusinessLogic.Exceptions.ControllerExceptions
@using BusinessLogic.Exceptions.ReservationControllerExceptions
@using DepoQuick.Domain
@inject Session Session
@inject NavigationManager NavigationManager
@inject DepoQuickContext DepoQuickContext

<html lang="es">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>

    <body>

    <h3>¡Hola, @_client.Name! Aquí puedes revisar tus pagos.</h3>
    
        @if (_showAlertPrice)
        {
          <br>
           <div class="alert alert-primary" role="alert">
            <h4 class="alert-heading">¿Estás seguro?</h4>
            <p>Estas a punto de realizar el pago de la reserva</p>
            <hr>
            <input @onclick="AddPayment" type="submit" class="btn btn-primary" value="Aceptar">
          </div>
          <br>
        }
        
        @if (_showAlertInvalidDeposit)
        {
            <br>
            <div class="alert alert-danger" role="alert">
                ¡Error, no se encuentra el deposito de la reservacion, intente de nuevo!
                </div>
            <br>
            
            }

        <table class="table">
                <thead>
                    <tr>
                        <th>Depósito</th>
                        <th>Desde</th>
                        <th>Hasta</th>
                        <th>Monto</th>
                        <th>Pago</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Reservation reservation in _listOfReservations)
                    {
                        <tr>
                            @{
                                _depositId = DepoQuickContext.Entry(reservation).Property<int>("DepositId").CurrentValue;
                                _date = reservation.Date; 
                                _initialDate = reservation.Date.GetInitialDate();
                                _finalDate = reservation.Date.GetFinalDate();
                                _reservation = reservation; 
                                
                                _deposit = _depositController.GetDeposit(_depositId);
                            }
                            <td>Depósito @_depositId</td>
                            <td>@_initialDate.ToString("dd/MM/yyyy")</td>
                            <td>@_finalDate.ToString("dd/MM/yyyy")</td>
                            <td>$ @_deposit.CalculatePrice(_date.NumberOfDays())</td>
                            
                            @{
                                GetPayment(reservation);
                            }
                            @if (reservation.Status == -1)
                            {
                                <td>
                                    <button class="btn btn-danger btn-sm">Rechazada</button>
                                </td>
                                
                            }
                            else
                            {
                                @if (_paymentOfReservation != null)
                                {
                                    @if (_paymentOfReservation.Status == "reservado")
                                    {
                                        <td>
                                            <button class="btn btn-secondary btn-sm">Pendiente de Aprobación</button>
                                        </td>
                                    
                                    }
                                    else
                                    {
                                        @if (_paymentOfReservation.Status == "capturado")
                                        {
                                            <td>
                                                <button class= "btn btn-success btn-sm">Pago Aprobado</button>
                                            </td>
                                        
                                        }
                                    }
                                }
                                else 
                                {
                                    <td>
                                        <input @onclick="ShowAlert"  id="wantToMakeThePayment" class="btn btn-primary" value="Pagar">
                                    </td>
                                } 
                            }
                        </tr>
                    }
                </tbody>
            </table>
    </body>
</html>




@code {
    private List<Reservation> _listOfReservations;
    private Client _client;
    private Deposit _deposit; 
    private Reservation _reservation;
    
    ReservationController _reservationController;

    private int _depositId;
                                
    private DateTime _initialDate;
    private DateTime _finalDate;
    private DateRange _date; 
    
    private bool _showAlertPrice = false;
    private bool _showAlertInvalidDeposit;
    
    
    private Payment _paymentOfReservation;
    
    private DepositController _depositController;
    
    private UserController _userController;
    
    private Session _session;
    
    protected override void OnInitialized()
    {
        _reservationController = new ReservationController(DepoQuickContext, Session);
        
        _client = (Client)Session.ActiveUser;
        
        _listOfReservations = _reservationController.GetReservationsById(_client.Id);
        
        _userController = new UserController(DepoQuickContext);
        
        _session = new Session(_userController);
        
        _depositController = new DepositController(DepoQuickContext,_session);

        HideAllAlerts(); 
    }
    
    private void HideAllAlerts()
    {
        _showAlertPrice = false;
        _showAlertInvalidDeposit = false; 
    }
    
    private void GetPayment(Reservation reservation)
    {
        try
        {
            HideAllAlerts(); 
            _paymentOfReservation = _reservationController.GetPaymentOfReservation(reservation);
        }
        catch (PaymentNotFoundException paymentNotFoundException)
        {
            _paymentOfReservation = null; 
        }
        
        
    }

    private void ShowAlert()
    {
        HideAllAlerts(); 
        try
        {
            _showAlertPrice = true;
        }
        catch (DepositNotFoundException depositNotFoundException)
        {
            _showAlertInvalidDeposit = true; 
        }
        
    }

    private void AddPayment()
    {
        _reservationController.PayReservation(_reservation); 
    }
    
    
    
}
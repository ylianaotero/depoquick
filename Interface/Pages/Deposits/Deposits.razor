@page "/Deposits"
@using BusinessLogic
@using BusinessLogic.Controllers
@using DepoQuick.Domain
@inject SessionController SessionController
@inject NavigationManager NavigationManager
@inject DepositController DepositController


<html lang="es">
    <head>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    </head>

    <body>
        <h3>¡Hola, @_loggedInUser.Name! Aquí puedes encontrar nuestros depósitos.</h3>

    @if (_showAlertDepositDeletedSuccessfully)
    {
        <div class="alert alert-success" role="alert">
            El depósito ha sido eliminado correctamente.
        </div>
    }
    @if (_showAlertDepositDeletedUnsuccessfully)
    {
        <div class="alert alert-danger" role="alert">
            El depósito no pudo ser eliminado porque está reservado o tiene reservas próximas.
        </div>
    }
    @if (_showAlertAboutToDeleteDeposit)
    {
        <br/>
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">¿Estás seguro?</h4>
            <p>Estás a punto de eliminar este depósito. Esta acción es irreversible.</p>
            <hr>
            <button class="btn btn-danger" @onclick="(() => DeleteDeposit())">Aceptar</button>
            <button class="btn btn-primary" @onclick="HideAllAlerts">Cancelar</button>
        </div>
        <br/>
    }
    @if (_showAlertSomethingWentWrong)
    {
        <div class="alert alert-danger" role="alert">
            El depósito no pudo ser eliminado.
        </div>
    }
        
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>Depósito</th>
            <th>Nombre</th>
            <th>Área</th>
            <th>Tamaño</th>
            <th>Climatización</th>
            <th>Promociones actuales</th>
            <th>Reservado</th>
            @if (_loggedInUser.IsAdministrator)
            {
                <th>Con reservas próximas</th>
            }
        </tr>
        </thead>
        
        <tbody>
        @foreach (Deposit deposit in _listOfDeposits)
        {
            <tr>
                <td>@deposit.Id</td>
                <td>@deposit.Name</td>
                <td>@deposit.Area</td>
                <td>@deposit.Size</td>
                <td>@BoolToString(deposit.AirConditioning)</td>
                <td>
                    @foreach (var promotion in deposit.Promotions)
                    {
                        if (promotion.IsCurrentlyAvailable())
                        {
                            <p>@promotion.Label - @(promotion.DiscountRate * PercentageMultiplier)%</p>
                        }
                    }
                </td>
                <td>@BoolToString(deposit.IsReserved())</td>
                @if (_loggedInUser.IsAdministrator)
                {
                    <td>@BoolToString(deposit.HasUpcomingReservations())</td>
                }
                <td>
                    <div class="btn-group">
                        <button class="btn btn-info" @onclick="(() => GoToDepositRatingsPage(deposit))">Ver valoraciones
                        </button>
                    </div>
                </td>
                @if (_loggedInUser.IsAdministrator)
                {
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-info" @onclick="(() => AddAvailabilityToDeposit(deposit))">Agregar fecha de disponibilidad
                                <i class="oi oi-calendar"></i>
                            </button>
                        </div>
                    </td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-danger" @onclick="(() => AttemptToDeleteDeposit(deposit))">Eliminar
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>
                    </td>
                }
            </tr>
        }
        </tbody>
        
    </table>
    
    @if (_loggedInUser.IsAdministrator)
    {
        <button class="btn btn-primary" @onclick="GoToAddDepositPage">Crear depósito</button>
    }
    </body>
</html>

@code {
    private const double PercentageMultiplier = 100.0;
    
    private List<Deposit> _listOfDeposits;
    private User _loggedInUser;

    private bool _showAlertDepositDeletedUnsuccessfully;
    private bool _showAlertDepositDeletedSuccessfully;
    private bool _showAlertAboutToDeleteDeposit;
    private bool _showAlertSomethingWentWrong;
    
    private Deposit _depositToDelete;
    private Deposit _depositToAddDate;
    
    protected override void OnInitialized()
    {
        _loggedInUser = SessionController.ActiveUser;

        _listOfDeposits = DepositController.GetDeposits();

        _depositToDelete = null;
        _depositToAddDate = null;
        
        HideAllAlerts();
    }
    
    private string BoolToString(bool value)
    {
        return value ? "Si" : "No";
    }

    private void GoToAddDepositPage()
    {
        NavigationManager.NavigateTo("/AddDeposit");
    }
    
    private void AttemptToDeleteDeposit(Deposit deposit)
    {
        HideAllAlerts();
        
        _depositToDelete = deposit;
        
        if (_depositToDelete.IsReserved() || _depositToDelete.HasUpcomingReservations())
        {
            _showAlertDepositDeletedUnsuccessfully = true;
        }
        else
        {
            _showAlertAboutToDeleteDeposit = true;
        }
    }
    
    public void HideAllAlerts()
    {
        _showAlertDepositDeletedUnsuccessfully = false;
        _showAlertDepositDeletedSuccessfully = false;
        _showAlertAboutToDeleteDeposit = false;
        _showAlertSomethingWentWrong = false;
    }

    private void DeleteDeposit()
    {
        HideAllAlerts();
        try
        {
            DepositController.DeleteDeposit(_depositToDelete);
            _showAlertDepositDeletedSuccessfully = true;
        } catch (Exception e)
        {
            _showAlertSomethingWentWrong = true;
        }
    }

    private void AddAvailabilityToDeposit(Deposit deposit)
    {
        int depositId = deposit.Id;
        NavigationManager.NavigateTo($"/DepositAvailability/{depositId}");
    }
    
    private void GoToDepositRatingsPage(Deposit deposit)
    {
        int depositId = deposit.Id;
        NavigationManager.NavigateTo($"/DepositRatings/{depositId}");
    }
}
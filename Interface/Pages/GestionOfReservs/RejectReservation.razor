@page "/Reject/{id:int}"
@inject MemoryDataBase MemoryDataBase
@inject NavigationManager NavigationManager
@using BusinessLogic
@using DepoQuick.Domain
@using DepoQuick.Domain.Exceptions.ControllerExceptions
@using DepoQuick.Domain.Exceptions.ReservationExceptions


<h3>Rechazar reservacion</h3>

@if (_showAlertReservationNotFound)
{
    <br>
    <div class="alert alert-danger" role="alert">
        ¡No se encontro deposito con ese id, no se puede aprobar ni rechazar, intente de nuevo!
    </div>
    <br>
}

@if (_showAlertInvalidComment)
  {
    <br>
     <div class="alert alert-danger" role="alert">
       ¡Comentario invalido, debe tener menos de 300 caractres!
     </div>
    <br>
  }

@if (_showAlertEmptyComment)
  {
    <br>
     <div class="alert alert-danger" role="alert">
       ¡Comentario invalido, no debe estar vacio!
     </div>
    <br>
  }

<form>
    <div class="form-group">
        <br>
        <label>Por favor, especifique el motivo del rechazo de la reserva</label>
        <br> 
        <textarea @bind="Comment" class="form-control" id="reservationText" name="reservationText" rows="4" cols="50"></textarea>
        <br>
    </div>
</form>
<button @onclick="() => RejectTheReservation(_currentReservation.GetId())" class="btn btn-danger btn-sm">Rechazar</button>
<a href="/GestionOfReservsAdmin" class="btn btn-primary btn-sm">Cancelar</a>

@code {
    private NavigationManager _navigationManager;
    
    private Controller _controller;
    private Reservation _currentReservation; 

    private String _comment;
    
    private bool _showAlertReservationNotFound; 
    private bool _showAlertInvalidComment;
    private bool _showAlertEmptyComment; 
    
    [Parameter]
    public int Id { get; set; }

    protected override void OnInitialized()
    {
        _controller = new Controller(MemoryDataBase);
        _currentReservation = _controller.GetReservation(Id);
        _navigationManager = NavigationManager; 
    }

    private String Comment
    {
        get => _comment;
        set { _comment = value; }
    }
    
    
    private void RejectTheReservation(int id)
    {
        try
        {
            Reservation reservation = _controller.GetReservation(id);
            reservation.SetMessage(_comment);
            reservation.SetSate(-1);
            _navigationManager.NavigateTo("/GestionOfReservsAdmin");
        }
        catch (ExceptionReservationNotFound exceptionReservationNotFound)
        {
            _showAlertReservationNotFound = true;

        }
        catch (ReservationMessageHasMoreThan300CharactersException reservationMessageHasMoreThan300CharactersException)
        {
            _showAlertInvalidComment = true;
        }
        catch (ReservationWithEmptyMessageException reservationWithEmptyMessageException)
        {
            _showAlertEmptyComment = true;
        }

    }
    
}
    

@page "/EditRating/{Id:int}" 
@using BusinessLogic
@using BusinessLogic.Exceptions.UserControllerExceptions
@using DepoQuick.Domain
@using DepoQuick.Exceptions.RatingException
@inject NavigationManager NavigationManager
@inject RatingController RatingController

<html lang="es">
    <head>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    </head>

    <body>
        <h3>Editar valoración</h3>

        @if (_showAlertComment)
        {
            <div class="alert alert-danger" role="alert">
                El comentario debe tener entre 1 y 500 caracteres. Por favor inténtalo de nuevo.
            </div>
        }

        <form action="#" method="POST">
            <div class="mb-3">
                <label for="label" class="form-label">Comentario:</label>
                <input type="text" class="form-control" id="comment" name="comment" @bind="_comment">
            </div>

           <div class="mb-3">
               <label for="rating" class="form-label">Estrellas:</label>
               <div style="display: flex; justify-content: flex-start;">
                   <div class="rating">
                       @for (int i = 1; i <= 5; i++)
                       {
                           <input type="radio" id="@($"star{i}")" name="rating" value="@i" class="rating__input" @onchange="((e) => UpdateStars(e.Value.ToString()))">
                           <label for="@($"star{i}")" class="rating__label"><i class="fa fa-star"></i></label>
                       }
                   </div>
               </div>
           </div>

            <br/>
            <input @onclick="AttemptToRate" id="addNewRating" class="btn btn-primary" value="Guardar valoración">
            <input @onclick="GoToMyReservationsPage" id="cancelRating" class="btn btn-primary" value="Cancelar">
        </form>
    </body>
</html>

@code {
    [Parameter] public int Id { get; set; }
    
    private string _comment;
    private int _stars;
    Rating _ratingToEdit;

    private bool _showAlertComment;
    private bool _showAlertStars;
    private bool _showAlertActionRestrictedToClient;
    private bool _showAlertSomethingWentWrong;
    
    private bool _reservationRatedSuccessfully;
    
    protected override void OnParametersSet()
    {

        _ratingToEdit = RatingController.Get(Id);
        _comment = _ratingToEdit.Comment;
        _stars = _ratingToEdit.Stars;
        
        HideAllAlerts();
    }
    
    private void UpdateStars(string value)
    {
        _stars = int.Parse(value);
    }

    private void AttemptToRate()
    {
        HideAllAlerts();
        AddRating();

        if (_reservationRatedSuccessfully)
        {
            GoToMyReservationsPage();
        }
    }
    
    private void AddRating()
    {
        try
        {
            RatingController.UpdateRating(_ratingToEdit, _comment, _stars);
            _reservationRatedSuccessfully = true;
        }
        catch (InvalidStarsForRatingException invalidStarsForRatingException)
        {
            _showAlertStars = true;
        }
        catch (InvalidCommentForRatingException invalidCommentForRatingException)
        {
            _showAlertComment = true;
        }
        catch (ActionRestrictedToClientException actionRestrictedToClientException)
        {
            _showAlertActionRestrictedToClient = true;
        }
        catch (Exception e)
        {
            _showAlertSomethingWentWrong = true;
        }
    }
    
    private void GoToMyReservationsPage()
    {
        NavigationManager.NavigateTo("/GestionOfReservsClient");
    }
    
    private void HideAllAlerts()
    {
        _showAlertComment = false;
        _showAlertStars = false;
        _showAlertActionRestrictedToClient = false;
        _showAlertSomethingWentWrong = false;
    }
}
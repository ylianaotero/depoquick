@page "/AddPromotion"
@using BusinessLogic
@using DepoQuick.Domain
@using DepoQuick.Exceptions.DateRangeExceptions
@using DepoQuick.Exceptions.PromotionExceptions
@inject NavigationManager NavigationManager
@inject PromotionController PromotionController
@inject DepositController DepositController

<html lang="es">
    <head>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    </head>

    <body>
    <h3>Agregar promoción</h3>

    @if (_showAlertLabelHasMoreThan20Characters || _showAlertEmptyLabel)
    {
    <div class="alert alert-danger" role="alert">
        La etiqueta debe tener entre 1 y 20 caracteres. Por favor intentalo de nuevo.
    </div>
    }

    @if (_showAlertInvalidPercentage)
    {
    <div class="alert alert-danger" role="alert">
        El porcentaje de descuento debe estar entre 5 y 75. Por favor intentalo de nuevo.
    </div>
    }

    @if (_showAlertInvalidDateRange)
    {
        <div class="alert alert-danger" role="alert">
            La fecha de inicio debe ser menor a la fecha de finalización. Por favor intentalo de nuevo.
        </div>
    }

    @if (_showAlertEmptyDateRange)
    {
        <div class="alert alert-danger" role="alert">
            La fecha de no puede ser vacía. Por favor intentalo de nuevo.
        </div>
    }    

    @if (_showAlertSomethingWentWrong)
    {
        <div class="alert alert-danger" role="alert">
            Algo salió mal. Por favor intentalo de nuevo.
        </div>
    }

    @if (_showAlertActionRestrictedToAdministrator)
    {
        <br/>
        <div class="alert alert-danger" role="alert">
            Solo un administrador puede eliminar promociones.
        </div>
        <br/>
    } 

        <form action="#" method="POST">
            <div class="mb-3">
                <label for="label" class="form-label">Etiqueta:</label>
                <input type="text" class="form-control" id="label" name="label" @bind="_label">
            </div>
            <div class="mb-3">
                <label for="discountRate" class="form-label">Porcentaje de descuento:</label>
                <input type="number" class="form-control" id="discountRate" name="discountRate" @bind="_discountRate">
            </div>
            <div class="mb-3">
                <label for="startDate" class="form-label">Desde:</label>
                <input type="date" class="form-control" id="startDate" name="startDate" @bind="_startDate">
            </div>
            <div class="mb-3">
                <label for="finalDate" class="form-label">Hasta:</label>
                <input type="date" class="form-control" id="finalDate" name="finalDate" @bind="_finalDate">
            </div>
            
            <label for="deposits" class="form-label">Depósitos: </label>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="select-all" @onclick="() => SelectAllDeposits()" />
                <label class="form-check-label" for="select-all">
                    Selecccionar todo
                </label>
            </div>
            @foreach (var deposit in _deposits)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="@deposit.Id" @onclick="() => ToggleDepositSelection(deposit)" checked="@IsSelected(deposit)"/>
                    <label class="form-check-label" for="@deposit.Id">
                        Depósito @deposit.Id - Area @deposit.Area
                    </label>
                </div>
            }

            <br/>
            <input @onclick="AttemptToAddNewPromotion" id="addNewPromotion" class="btn btn-primary" value="Crear promoción">
            <input @onclick="GoToPromotionsPage" id="cancelAddingPromotion" class="btn btn-primary" value="Cancelar">
        </form>
    </body>
</html>

@code {
    private const double PercentageDivider = 100.0;
    private DepoQuickContext _context;
    
    private string _label;
    private double _discountRate;
    private DateTime _startDate;
    private DateTime _finalDate;
    private DateRange _date;
    private List<Deposit> _deposits;
    private List<Deposit> _selectedDeposits;
    
    private bool _showAlertActionRestrictedToAdministrator;
    private bool _showAlertEmptyDateRange;
    private bool _showAlertInvalidDateRange;
    private bool _showAlertSomethingWentWrong;
    private bool _showAlertEmptyLabel;
    private bool _showAlertLabelHasMoreThan20Characters;
    private bool _showAlertInvalidPercentage;
    
    private bool _selectAllDeposits;

    protected override void OnInitialized()
    {
        _startDate = DateTime.Now;
        _finalDate = DateTime.Now;
        _deposits = DepositController.GetDeposits();
        _selectedDeposits = new List<Deposit>();
        _selectAllDeposits = false;
        HideAllAlerts();
    }
    
    void ToggleDepositSelection(Deposit deposit)
    {
        if (_selectedDeposits.Contains(deposit))
        {
            _selectedDeposits.Remove(deposit);
        }
        else
        {
            _selectedDeposits.Add(deposit);
        }
    }
    

    bool IsSelected(Deposit deposit)
    {
        return _selectedDeposits.Contains(deposit);
    }

    void SelectAllDeposits()
    {
        _selectAllDeposits = !_selectAllDeposits;
        if (_selectAllDeposits)
        {
            _selectedDeposits = new List<Deposit>(_deposits);
        }
        else
        {
            _selectedDeposits.Clear();
        }
    }   

    private void AttemptToAddNewPromotion()
    {
        HideAllAlerts();
        
        AddNewPromotion();
        GoToPromotionsPage();
    }
    
    private void AddNewPromotion()
    {
        _date = new DateRange(_startDate, _finalDate); 
        
        Promotion newPromotion = new Promotion();
        
        newPromotion.Label = _label;
        newPromotion.DiscountRate = _discountRate/PercentageDivider;
        newPromotion.ValidityDate = _date;
        
        PromotionController.Add(newPromotion, _selectedDeposits);
    }
    
    private void GoToPromotionsPage()
    {
        NavigationManager.NavigateTo("/Promotions");
    }
    
    private void HideAllAlerts()
    {
        _showAlertActionRestrictedToAdministrator = false;
        _showAlertEmptyDateRange = false;
        _showAlertInvalidDateRange = false;
        _showAlertSomethingWentWrong = false;
        _showAlertEmptyLabel = false;
        _showAlertLabelHasMoreThan20Characters = false;
        _showAlertInvalidPercentage = false;
    }
}
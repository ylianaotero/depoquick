@page "/EditPromotion/{Id:int}" 
@using BusinessLogic
@using DepoQuick.Domain
@using DepoQuick.Exceptions.DateRangeExceptions
@using DepoQuick.Exceptions.PromotionExceptions
@inject Session Session
@inject NavigationManager NavigationManager
<html lang="es">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>
<body>

<h3>Editar promoción</h3>

@if (_showAlertLabel)
{
    <div class="alert alert-danger" role="alert">
        La etiqueta debe tener entre 1 y 20 caracteres. Por favor intentalo de nuevo.
    </div>
}

@if (_showAlertDiscountRate)
{
    <div class="alert alert-danger" role="alert">
        El porcentaje de descuento debe estar entre 5 y 75. Por favor intentalo de nuevo.
    </div>
}

@if (_showAlertDate)
{
    <div class="alert alert-danger" role="alert">
        La fecha de inicio debe ser menor a la fecha de finalización. Por favor intentalo de nuevo.
    </div>
}  

<form action="#" method="POST">
    <div class="mb-3">
        <label for="label" class="form-label">Etiqueta:</label>
        <input type="text" class="form-control" id="label" name="label" @bind="_label">
    </div>
    <div class="mb-3">
        <label for="discountRate" class="form-label">Porcentaje de descuento:</label>
        <input type="number" class="form-control" id="discountRate" name="discountRate" @bind="_discountRate">
    </div>
    <div class="mb-3">
        <label for="startDate" class="form-label">Desde:</label>
        <input type="date" class="form-control" id="startDate" name="startDate" @bind="_startDate">
    </div>
    <div class="mb-3">
        <label for="finalDate" class="form-label">Hasta:</label>
        <input type="date" class="form-control" id="finalDate" name="finalDate" @bind="_finalDate">
    </div>
    <label for="deposits" class="form-label">Depósitos: </label>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="select-all" @onclick="() => SelectAllDeposits()" />
        <label class="form-check-label" for="select-all">
            Selecccionar todo
        </label>
    </div>
    @foreach (var deposit in _deposits)
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="@deposit.Id" @onclick="() => ToggleDepositSelection(deposit)" checked="@IsSelected(deposit)"/>
            <label class="form-check-label" for="@deposit.Id">
                Depósito @deposit.Id - Area @deposit.Area
            </label>
        </div>
    }
    <br/>
    <input @onclick="AttemptToEditPromotion" id="addNewPromotion" class="btn btn-primary" value="Actualizar promoción">
    <input @onclick="GoToPromotionsPage" id="cancelAddingPromotion" class="btn btn-primary" value="Cancelar">
</form>
  </body>
</html>

@code {
    [Parameter] 
    public int Id { get; set; }
    
    private const double PercentageDivider = 100.0;
    private Controller _controller;
    private string _label;
    private double _discountRate;
    private DateTime _startDate;
    private DateTime _finalDate;
    private DateRange _date;
    private List<Deposit> _deposits;
    private List<Deposit> _selectedDeposits;
    private bool _selectAllDeposits;
    
    private Promotion _promotionToEdit;
    
    private bool _showAlertLabel;
    private bool _showAlertDiscountRate;
    private bool _showAlertDate;
    
    protected override void OnParametersSet()
    {
        _controller = new Controller(Session);
        _promotionToEdit = _controller.GetPromotion(Id);
        _startDate = _promotionToEdit.ValidityDate.GetInitialDate();
        _finalDate = _promotionToEdit.ValidityDate.GetFinalDate();
        _label = _promotionToEdit.Label;
        _discountRate = _promotionToEdit.DiscountRate * PercentageDivider;
        _deposits = _controller.GetDeposits();
        _selectedDeposits = new List<Deposit>();
        _selectAllDeposits = false;
        
        HideAllAlerts();
    }

    private void AttemptToEditPromotion()
    {
        HideAllAlerts();
        ShowAlerts();
        
        if (WrongPromotionData())
        {
            return;
        }
        
        UpdatePromotion();
        GoToPromotionsPage();
    }
    
    void ToggleDepositSelection(Deposit deposit)
    {
        if (_selectedDeposits.Contains(deposit))
        {
            _selectedDeposits.Remove(deposit);
        }
        else
        {
            _selectedDeposits.Add(deposit);
        }
    }
    

    bool IsSelected(Deposit deposit)
    {
        return _selectedDeposits.Contains(deposit);
    }

    void SelectAllDeposits()
    {
        _selectAllDeposits = !_selectAllDeposits;
        if (_selectAllDeposits)
        {
            _selectedDeposits = new List<Deposit>(_deposits);
        }
        else
        {
            _selectedDeposits.Clear();
        }
    }  
    
    private void UpdatePromotion()
    {
        _date = new DateRange(_startDate, _finalDate); 
        
        _controller.UpdatePromotionData(_promotionToEdit, _label, _discountRate/PercentageDivider, _date);
        _controller.UpdatePromotionDeposits(_promotionToEdit, _selectedDeposits);
    }
    
    private void GoToPromotionsPage()
    {
        NavigationManager.NavigateTo("/Promotions");
    }
    
    private bool WrongPromotionData()
    {
        return _showAlertLabel || _showAlertDiscountRate || _showAlertDate;
    }
    
    private void ShowAlerts()
    {
        HideAllAlerts();
        
        if (!IsAValidLabel())
        {
            _showAlertLabel = true;
        } else if (!IsAValidDiscountRate())
        {
            _showAlertDiscountRate = true;
        } else if (!IsAValidDate())
        {
            _showAlertDate = true;
        }
    }
    
    private void HideAllAlerts()
    {
        _showAlertLabel = false;
        _showAlertDiscountRate = false;
        _showAlertDate = false;
    }
    
    private bool IsAValidDate()
    {
        try
        {
            _date = new DateRange(_startDate, _finalDate);
            return true;
        }
        catch (InvalidDateRangeException invalidDateRangeException)
        {
            return false;
        }
        catch (EmptyDateRangeException emptyDateRangeException)
        {
            return false;
        }
    }
    
    
    private bool IsAValidLabel()
    {
        try
        {
            Promotion promotion = new Promotion();
            promotion.Label = _label;
            
            return true;
            
        } catch (PromotionWithEmptyLabelException emptyLabelException)
        {
            return false;
        } 
        catch (PromotionLabelHasMoreThan20CharactersException labelHasMoreThan20CharactersException)
        {
            return false;
        }
    }
    
    private bool IsAValidDiscountRate()
    {
        try
        {
            Promotion promotion = new Promotion();
            promotion.DiscountRate = _discountRate/100;

            return true;

        }
        catch (InvalidPercentageForPromotionException invalidPercentageForPromotionException)
        {
            return false;
        }
    }
}
@page "/Promotions"
@using BusinessLogic
@using BusinessLogic.Exceptions.ControllerExceptions
@using DepoQuick.Domain
@inject Session Session
@inject NavigationManager NavigationManager
@inject PromotionController PromotionController
@inject DepositController DepositController

<html lang="es">
    <head>  
        <meta charset="utf-8"/> 
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    </head>

    <body>
        <h3>¡Hola, @_loggedInUser.Name! Aquí puedes encontrar nuestras promociones.</h3>

    @if (_showAlertPromotionDeletedSuccessfully)
    {
        <br/>
        <div class="alert alert-success" role="alert">
            La promoción ha sido eliminada correctamente.
        </div>
        <br/>
    }
    @if (_showAlertPromotionIsTiedToReservedDeposit)
    {
        <br/>
        <div class="alert alert-danger" role="alert">
            La promoción no pudo ser eliminada porque está atada a un depósito reservado o con reservas pendientes.
        </div>
        <br/>
    }
    @if (_showAlertActionRestrictedToAdministrator)
    {
        <br/>
        <div class="alert alert-danger" role="alert">
            Solo un administrador puede eliminar promociones.
        </div>
        <br/>
    }
    @if (_showAlertAboutToDeletePromotion)
    {
        <br/>
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">¿Estás seguro?</h4>
            <p>Estás a punto de eliminar esta promoción. Esta acción es irreversible.</p>
            <hr>
            <button class="btn btn-danger" @onclick="(() => DeletePromotion())">Aceptar</button>
            <button class="btn btn-primary" @onclick="HideAllAlerts">Cancelar</button>
        </div>
        <br/>
    }
    @if (_showAlertSomethingWentWrong)
    {
        <br/>
        <div class="alert alert-danger" role="alert">
            La promoción no pudo ser eliminada.
        </div>
        <br/>
    }
    
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>Promoción</th>
            <th>Desde</th>
            <th>Hasta</th>
            <th>Descuento</th>
            <th>Depósitos a los que aplica</th>
            <th>Activa actualmente</th>
        </tr>
        </thead>
        
        <tbody>
        @foreach (Promotion promotion in _listOfPromotions)
        {
            <tr>
                <td>@promotion.Label</td>
                <td>@promotion.ValidityDate.GetInitialDate().ToString("dd/MM/yyyy")</td>
                <td>@promotion.ValidityDate.GetFinalDate().ToString("dd/MM/yyyy")</td>
                <td>@(promotion.DiscountRate*PercentageMultiplier)%</td>
                <td>
                    @foreach (var deposit in DepositController.GetDepositsByPromotion(promotion))
                    {
                        <p>@deposit.Name (@deposit.Id)</p>
                    }
                </td>
                <td>@BoolToString(promotion.IsCurrentlyAvailable())</td>
                @if (_loggedInUser.IsAdministrator)
                {
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-danger" @onclick="(() => AttemptToDeletePromotion(promotion))">Eliminar
                                <i class="fa fa-trash"></i>
                            </button>
                            <button class="btn btn-info" @onclick="(() => GoToEditPromotionPage(promotion))">Editar 
                                <i class="fa fa-pencil"></i>
                            </button>
                        </div>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
    
    @if (_loggedInUser.IsAdministrator)
    {
        <button class="btn btn-primary" @onclick="GoToAddPromotionPage">Crear promoción</button>
    }
    </body>
</html>

@code {
    private const double PercentageMultiplier = 100.0;
    private List<Promotion> _listOfPromotions;
    private User _loggedInUser;
    
    Promotion _promotionToDelete;
    
    private bool _showAlertPromotionDeletedSuccessfully;
    private bool _showAlertPromotionIsTiedToReservedDeposit;
    private bool _showAlertAboutToDeletePromotion;
    private bool _showAlertSomethingWentWrong;
    private bool _showAlertActionRestrictedToAdministrator;
    
    protected override void OnInitialized()
    {
        
        _loggedInUser = Session.ActiveUser;        
        _promotionToDelete = null;
        
        _listOfPromotions = PromotionController.GetPromotions();
        HideAllAlerts();
    }
    
    private string BoolToString(bool value)
    {
        return value ? "Si" : "No";
    }
    
    private void GoToAddPromotionPage()
    {
        NavigationManager.NavigateTo("/AddPromotion");
    }

    private void AttemptToDeletePromotion(Promotion promotion)
    {
        HideAllAlerts();
        
        if (PromotionController.PromotionIsTiedToReservedDeposit(promotion))
        {
            _showAlertPromotionIsTiedToReservedDeposit = true;
        } else
        {
            _showAlertAboutToDeletePromotion = true;
            _promotionToDelete = promotion;
        }
    }
    
    private void DeletePromotion()
    {
        HideAllAlerts();
        
        try
        {
            int id = _promotionToDelete.Id;
            PromotionController.Delete(id);
            _showAlertPromotionDeletedSuccessfully = true;
            _listOfPromotions = PromotionController.GetPromotions();
        }
        catch (ActionRestrictedToAdministratorException e)
        {
            _showAlertActionRestrictedToAdministrator = true;
        }
        catch (Exception e)
        {
            _showAlertSomethingWentWrong = true;
        }
    }
    
    private void HideAllAlerts()
    {
        _showAlertActionRestrictedToAdministrator = false;
        _showAlertPromotionIsTiedToReservedDeposit = false;
        _showAlertPromotionDeletedSuccessfully = false;
        _showAlertAboutToDeletePromotion = false;
        _showAlertSomethingWentWrong = false;
    }
    
    private void GoToEditPromotionPage(Promotion promotion)
    {
        int promotionId = promotion.Id;
        NavigationManager.NavigateTo($"/EditPromotion/{promotionId}");
    }
}
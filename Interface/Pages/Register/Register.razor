@page "/Register"
@using BusinessLogic
@using DepoQuick.Domain
@using DepoQuick.Domain.Exceptions.UserExceptions
@using Microsoft.AspNetCore.Mvc.Infrastructure
@inject MemoryDataBase MemoryDataBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<html lang="es" xmlns="http://www.w3.org/1999/html">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>

    <body>
    <h3>¡Bienvenido!</h3>
    
    @if (_showAlertInvalidUserPassword)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">La contraseña no es válida</h4>
      </div>
      <br>
    }
    
    @if (_showAlertInvalidUserEmail)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">El email ingresado no es válido</h4>
      </div>
      <br>
    }
    
    @if (_showAlertInvalidUserName)
        {
          <br>
           <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">El nombre ingresado no es válido</h4>
          </div>
          <br>
        }
    
    <form>
        <div class="form-group">
            <label for="name">Nombre:</label>
            <input type="text" class="form-control" id="name" @bind="_name" required />
        </div>
        <div class="form-group">
            <label for="email">Correo Electrónico:</label>
            <input type="email" class="form-control" id="email" @bind-value="_email" required />
        </div>
        <div class="form-group">
            <label for="password">Contraseña:</label>
            <input type="password" class="form-control" id="password" @bind-value="_password"required />
        </div>
        <div class="form-group">
                    <label for="password">Ingrese nuevamente la contraseña:</label>
                    <input type="password" class="form-control" id="passwordValidation"@bind-value="_passwordValidation" required />
                </div>
        <br><br/>
        <button type="submit" class="btn btn-primary" @onclick="AttemptToRegister">Registrarse</button>
        @if (registred) {
            <div class="alert alert-success" role="alert">
                El usuario ingresó correctamente
            </div>
        }
    </form>
    </body>
</html>

@code {
    bool registred = false;
    private User _user;
    private bool _showAlertInvalidUserPassword;
    private bool _showAlertInvalidUserName;
    private bool _showAlertInvalidUserEmail;
    private bool _showAlertNewAdmin;
    private bool _showAlertNewClient;
    private Controller _controller;
    private String _name;
    private String _email;
    private String _password;
    private String _passwordValidation;

    private void AttemptToRegister()
    {
        HideAllAlerts();
        ShowAlert();

        if (IsWrongUserData())
        {
            return;
        }

        AddNewUser();
        GoToHomePage();
    }

    private void AddNewUser()
    {
        if (_controller.GetUsers().Count > 0)
        {
            RegisterClient();
        }
        else
        {
            RegisterAdmin();
        }
    }

    private bool IsWrongUserData()
    {
        return _showAlertInvalidUserEmail | _showAlertInvalidUserName | _showAlertInvalidUserPassword;
    }
    
    private void ShowAlert()
    {
        if (!IsAValidName())
        {
            _showAlertInvalidUserEmail = true;
        }
        if (!IsAValidEmail())
        {
            _showAlertInvalidUserEmail = true;
        }

        if (!IsValidPassword())
        {
            _showAlertInvalidUserPassword = true;
        }

    }

    private void HideAllAlerts()
    {
        _showAlertNewAdmin = false;
        _showAlertNewClient = false;
        _showAlertInvalidUserPassword = false;
        _showAlertInvalidUserName = false;
        _showAlertInvalidUserEmail = false;
    }

    private bool IsAValidName()
    {
        try
        {
            _user = new User(_name, _email, _password);
            return true;
        }
        catch (EmptyUserNameException emptyUserNameException)
        {
            return false;
        }
        catch (InvalidUserNameException invalidUserNameException)
        {
            return false;
        }
        catch (UserNameTooLongException userNameTooLongException)
        {
            return false;
        }
    }

    private bool IsAValidEmail()
    {
        try
        {
            _user = new User(_name, _email, _password);
            return true;
        }
        catch (EmptyUserEmailException emptyUserEmailException)
        {
            return false;
        }
        catch (InvalidUserEmailException invalidUserEmailException)
        {
            return false;
        }
    }

    private bool IsValidPassword()
    {
        try
        {
            _user = new User(_name, _email, _password);
            return true;
        }
        catch (EmptyUserPasswordException emptyUserPasswordException)
        {
            return false;
        }
        catch (InvalidUserPasswordException invalidUserPasswordException)
        {
            return false;
        }
        catch (PasswordTooShortException passwordTooShortException)
        {
            return false;
        }
    }

    private void RegisterAdmin()
    {
        User.ValidatePasswordConfirmation(_password,_passwordValidation);
        _controller.RegisterAdministrator(_name,_email,_password,_passwordValidation);
    }

    private void RegisterClient()
    {
        User.ValidatePasswordConfirmation(_password,_passwordValidation);
        _controller.RegisterClient(_name,_email,_password,_passwordValidation);
    }

    private void GoToHomePage()
    {
        NavigationManager.NavigateTo("/Home",forceLoad:true);
    }
    
    protected override void OnInitialized()
    {
        _controller = new Controller(MemoryDataBase);
        HideAllAlerts();
    }
}
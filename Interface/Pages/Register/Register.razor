@page "/Register"
@using BusinessLogic
@using DepoQuick.Domain
@using DepoQuick.Domain.Exceptions.MemoryDataBaseExceptions
@using DepoQuick.Domain.Exceptions.UserExceptions
@using Microsoft.AspNetCore.Mvc.Infrastructure
@inject MemoryDataBase MemoryDataBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<html lang="es" xmlns="http://www.w3.org/1999/html">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>

    <body>
    <h3>¡Bienvenido!</h3>
    
    @if (_showAlertInvalidUserPassword)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">La contraseña no es válida</h4>
      </div>
      <br>
    }
    
    @if (_showAlertInvalidUserEmail)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">El email ingresado no es válido</h4>
      </div>
      <br>
    }
    
    @if (_showAlertInvalidUserName)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">El nombre ingresado no es válido</h4>
      </div>
      <br>
    }
    
    @if (_showAlertEmptyUserName)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Debe completar el campo con un nombre válido</h4>
      </div>
      <br>
    }
    
    @if (_showAlertNameTooLong)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">El nombre ingresado es demasiado largo</h4>
      </div>
      <br>
    }
    
    @if (_showAlertEmptyUserEmail)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Debe completar el campo con un email valido</h4>
      </div>
      <br>
    }
    
    @if (_showAlertPasswordTooShort)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">La contraseña ingresada es demasiado corta</h4>
      </div>
      <br>
    }
    
    @if (_showAlertEmptyUserPassword)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">El campo no puede estar vacío. Ingrese una contraseña</h4>
      </div>
      <br>
    }
    
    @if (_showAlertPasswordsDoNotMatch)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Las contraseñas no coinciden</h4>
      </div>
      <br>
    }
    
    @if (_showAlertUserAlreadyExists)
    {
      <br>
       <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Ya existe un usuario registrado con ese email</h4>
      </div>
      <br>
    }
    
    <form>
        <div class="form-group">
            <label for="name">Nombre:</label>
            <input type="text" class="form-control" id="name" @bind="_name" required />
        </div>
        <div class="form-group">
            <label for="email">Correo Electrónico:</label>
            <input type="email" class="form-control" id="email" @bind-value="_email" required />
        </div>
        <div class="form-group">
            <label for="password">Contraseña: (Debe tener un mínimo de 8 caracteres, un simbolo "#,$.,%", al menos una letra minúscula, al menos una mayúscula y al menos un dígito</label>
            <input type="password" class="form-control" id="password" @bind-value="_password"required />
        </div>
        <div class="form-group">
                    <label for="password">Ingrese nuevamente la contraseña:</label>
                    <input type="password" class="form-control" id="passwordValidation"@bind-value="_passwordValidation" required />
        </div>
        <br><br/>
        <button type="button" class="btn btn-primary" @onclick="ShowAlert">Registrarse</button>
        <button type="button" class="btn btn-primary" @onclick="GoToHome">Cancelar</button>
        @if (registred) {
            <div class="alert alert-success" role="alert">
                El usuario ingresó correctamente
            </div>
        }
    </form>
    </body>
</html>

@code {
    bool registred = false;
    private User _user;
    
    private bool _showAlertEmptyUserName;
    private bool _showAlertNameTooLong;
    private bool _showAlertEmptyUserEmail;
    private bool _showAlertPasswordTooShort;
    private bool _showAlertEmptyUserPassword;
    private bool _showAlertPasswordsDoNotMatch;
    private bool _showAlertUserAlreadyExists;
    private bool _showAlertInvalidUserPassword;
    private bool _showAlertInvalidUserName;
    private bool _showAlertInvalidUserEmail;
    
    private bool _showAlertNewAdmin;
    private bool _showAlertNewClient;
    private Controller _controller;
    private String _name;
    private String _email;
    private String _password;
    private String _passwordValidation;
    
    
    private void ShowAlert()
    {
        HideAllAlerts();
        try
        {
            User.ValidatePasswordConfirmation(_password, _passwordValidation);
            _user = new User(_name, _email, _password);
            AddNewUser();
        }
        catch (EmptyUserNameException)
        {
            _showAlertEmptyUserName = true;
        }
        catch (InvalidUserNameException)
        {
            _showAlertInvalidUserName = true;
        }
        catch (UserNameTooLongException)
        {
            _showAlertNameTooLong = true;
        }
        catch (EmptyUserEmailException)
        {
            _showAlertEmptyUserEmail = true;
        }
        catch (InvalidUserEmailException)
        {
            _showAlertInvalidUserEmail = true;
        }
        catch (UserAlreadyExistsException)
        {
            _showAlertUserAlreadyExists = true;
        }
        catch (EmptyUserPasswordException)
        {
            _showAlertEmptyUserPassword = true;
        }
        catch (PasswordTooShortException)
        {
            _showAlertPasswordTooShort = true;
        }
        catch (InvalidUserPasswordException)
        {
            _showAlertInvalidUserPassword = true;
        }
        catch (UserPasswordsDoNotMatchException)
        {
            _showAlertPasswordsDoNotMatch = true;
        }
    }

    private void HideAllAlerts()
    {
        _showAlertNewAdmin = false;
        _showAlertNewClient = false;
        _showAlertInvalidUserName = false;
        _showAlertInvalidUserEmail = false;
        _showAlertInvalidUserPassword = false;
        _showAlertEmptyUserName = false;
        _showAlertNameTooLong = false;
        _showAlertEmptyUserEmail = false;
        _showAlertPasswordTooShort = false;
        _showAlertEmptyUserPassword = false;
        _showAlertPasswordsDoNotMatch = false;
        _showAlertUserAlreadyExists = false;
    }
    
    private void AddNewUser()
    {
        if (_controller.GetUsers().Count > 0) //fijarte si tiene administrador
        {
            RegisterClient();
        }
        else
        {
            RegisterAdmin();
        }
    }

    private void RegisterAdmin()
    {
        try
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
            _controller.RegisterAdministrator(_name, _email, _password, _passwordValidation); //ver porque parece que tiene error
            
        }
        catch (AdministratorAlreadyExistsException alreadyExistsException)
        {
            _showAlertNewAdmin = false; //estoy poniendo cualquier error
        }
        catch (UserPasswordsDoNotMatchException userPasswordsDoNotMatchException)
        {
            _showAlertNewAdmin = false; //estoy poniendo cualquier error
        }
    }

    private void RegisterClient()
    {
        _controller.RegisterClient(_name,_email,_password,_passwordValidation);
        NavigationManager.NavigateTo("/",forceLoad:true);
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/", forceLoad:true);
    }
    
    protected override void OnInitialized()
    {
        _controller = new Controller(MemoryDataBase);
        HideAllAlerts();
    }
}
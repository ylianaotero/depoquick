@page "/Register"
@using BusinessLogic
@using BusinessLogic.Exceptions.ControllerExceptions
@using DepoQuick.Domain
@using DepoQuick.Exceptions.UserExceptions
@using Microsoft.AspNetCore.Mvc.Infrastructure
@inject MemoryDataBase MemoryDataBase
@inject NavigationManager NavigationManager

<html lang="es" xmlns="http://www.w3.org/1999/html">
  <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  </head>

<body>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col">

                @if (UserLoggedIn())
                {
                    if (_controller.GetActiveUser().IsAdministrator())
                    {
                        <h3 class="text-center" style="color: #0a53be">Registrar cliente</h3>
                        <p class="lead text-center">Aquí puedes registrar un cliente, como administrador, ingresando toda la información necesaria.</p>
                    }
                }
                else
                {
                    <h3 class="text-center" style="color: #0a53be">Registrarse</h3>
                    <p class="lead text-center">Aquí puedes registrarte ingresando toda la información necesaria.</p>
                }
                
            </div>
        </div>
    </div>
    
    
    <div class="container-fluid mt-4">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="bg-white p-4 rounded border">
                    
                        @if (_showAlertInvalidUserPassword)
                        {
                          <div class="alert alert-danger" role="alert">
                              <p style="margin-bottom: 0%">La contraseña no es válida</p>
                              <small>(Debe tener un mínimo de 8 caracteres, un símbolo "#,$.,%", al menos una letra minúscula, al menos una mayúscula y al menos un dígito)</small>
                          </div>
                        }
                        
                        @if (_showAlertInvalidUserEmail)
                        {
                          <div class="alert alert-danger" role="alert">
                              <p style="margin-bottom: 0%">El email ingresado no es válido</p>
                          </div>
                        }
                        
                        @if (_showAlertInvalidUserName)
                        { 
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">El nombre ingresado no es válido</p>
                            </div>
                        }
                        
                        @if (_showAlertEmptyUserName)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">Debe completar el campo con un nombre válido</p>
                            </div>
                        }
                        
                        @if (_showAlertNameTooLong)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">El nombre ingresado es demasiado largo</p>
                            </div>
                        }
                        
                        @if (_showAlertEmptyUserEmail)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">Debe completar el campo con un email válido</p>
                            </div>
                        }
                        
                        @if (_showAlertPasswordTooShort)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">La contraseña ingresada es demasiado corta</p>
                            </div>
                        }
                        
                        @if (_showAlertEmptyUserPassword)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">El campo no puede estar vacío. Ingrese una contraseña</p>
                            </div>
                        }
                        
                        @if (_showAlertPasswordsDoNotMatch)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">Las contraseñas no coinciden</p>
                            </div>
                        }
                        
                        @if (_showAlertUserAlreadyExists)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">Ya existe un usuario registrado con ese email</p>
                            </div>
                        }
                        
                        @if (_showAlertNewAdmin)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">Ya existe un administrador registrado</p>
                            </div>
                        }
                        
                        @if (_showAlertCannotCreateClientBeforeAdmin)
                        {
                            <div class="alert alert-danger" role="alert">
                                <p style="margin-bottom: 0%">Todavía no se registró un administrador</p>
                            </div>
                        }
                    
                        <form>
                            <div class="form-group">
                                <label for="name">Nombre:</label>
                                <input type="text" class="form-control" id="name" @bind="_name" required/>
                            </div>
                            <br>
                            <div class="form-group">
                                <label for="email">Correo Electrónico:</label>
                                <input type="email" class="form-control" id="email" @bind="_email" required/>
                            </div>
                            <br>
                            <div class="form-group">
                                <label for="password">Contraseña:</label>
                                <input type="password" class="form-control" id="password" @bind="_password" required/>
                            </div>
                            <br>
                            <div class="form-group">
                                <label for="password">Ingrese nuevamente la contraseña:</label>
                                <input type="password" class="form-control" id="passwordValidation" @bind="_passwordValidation" required/>
                            </div>

                            <br>
                            
                            @if (_showAlertClientRegistered)
                            {
                                <div class="alert alert-success" role="alert">
                                    <p style="margin-bottom: 0%">¡Cliente registrado con éxito!</p>
                                </div>
                            }
                            
                            <br>
                            
                            <div class="text-center">
                                @if (UserLoggedIn())
                                {
                                    if (_controller.GetActiveUser().IsAdministrator())
                                    {
                                        <button type="button" class="btn btn-primary mr-2" @onclick="TryToRegister">Registrar cliente</button>
                                    }
                                }
                                else
                                {
                                    <button type="button" class="btn btn-primary mr-2" @onclick="TryToRegister">Registrarse</button>
                                    <button type="button" class="btn btn-primary" @onclick="GoToIndex">Cancelar</button>
                                }
                            </div>

                        </form>
                        
    
                </div>
            </div>
        </div>
    </div>


    </body>
</html>

@code {
    bool registred = false;
    private User _user;
    
    private bool _showAlertEmptyUserName;
    private bool _showAlertNameTooLong;
    private bool _showAlertEmptyUserEmail;
    private bool _showAlertPasswordTooShort;
    private bool _showAlertEmptyUserPassword;
    private bool _showAlertPasswordsDoNotMatch;
    private bool _showAlertUserAlreadyExists;
    private bool _showAlertInvalidUserPassword;
    private bool _showAlertInvalidUserName;
    private bool _showAlertInvalidUserEmail;
    private bool _showAlertCannotCreateClientBeforeAdmin; 
    private bool _showAlertNewAdmin;

    private bool _showAlertClientRegistered; 
    
    private Controller _controller;
    private String _name;
    private String _email;
    private String _password;
    private String _passwordValidation;
    
    protected override void OnInitialized()
    {
        _controller = new Controller(MemoryDataBase);
        CleanForm();
        HideAllAlerts();
    }
    
    private bool UserLoggedIn()
    {
        return _controller.UserLoggedIn();
    }
    
    
    private void TryToRegister()
    {
        HideAllAlerts();
        
        try
        {
            User.ValidatePasswordConfirmation(_password, _passwordValidation);
            _user = new User(_name, _email, _password);
            
            AddNewUser();
        }
        catch (EmptyUserNameException)
        {
            _showAlertEmptyUserName = true;
        }
        catch (InvalidUserNameException)
        {
            _showAlertInvalidUserName = true;
        }
        catch (UserNameTooLongException)
        {
            _showAlertNameTooLong = true;
        }
        catch (EmptyUserEmailException)
        {
            _showAlertEmptyUserEmail = true;
        }
        catch (InvalidUserEmailException)
        {
            _showAlertInvalidUserEmail = true;
        }
        catch (UserAlreadyExistsException)
        {
            _showAlertUserAlreadyExists = true;
        }
        catch (EmptyUserPasswordException)
        {
            _showAlertEmptyUserPassword = true;
        }
        catch (PasswordTooShortException)
        {
            _showAlertPasswordTooShort = true;
        }
        catch (InvalidUserPasswordException)
        {
            _showAlertInvalidUserPassword = true;
        }
        catch (UserPasswordsDoNotMatchException)
        {
            _showAlertPasswordsDoNotMatch = true;
        }
    }

    private void HideAllAlerts()
    {
        _showAlertNewAdmin = false;
        _showAlertInvalidUserName = false;
        _showAlertInvalidUserEmail = false;
        _showAlertInvalidUserPassword = false;
        _showAlertEmptyUserName = false;
        _showAlertNameTooLong = false;
        _showAlertEmptyUserEmail = false;
        _showAlertPasswordTooShort = false;
        _showAlertEmptyUserPassword = false;
        _showAlertPasswordsDoNotMatch = false;
        _showAlertUserAlreadyExists = false;
        _showAlertCannotCreateClientBeforeAdmin = false; 
        _showAlertClientRegistered = false; 
    }
    
    private void AddNewUser()
    {
        if (AdminIsRegistred()) 
        {
            RegisterClient();
        }
        else
        {
            RegisterAdmin();
        }
    }
    
    private bool AdminIsRegistred()
    {
        try
        {
            _controller.GetAdministrator();
            return true; 
        }
        catch (EmptyAdministratorException emptyAdministratorException)
        {
            return false; 
        }
    }

    private void RegisterAdmin()
    {
        try
        {
            _controller.RegisterAdministrator(_name, _email, _password, _passwordValidation); 
            
            GoToIndex();
            
        }
        catch (AdministratorAlreadyExistsException alreadyExistsException)
        {
            _showAlertNewAdmin = true; 
        }
        catch (UserPasswordsDoNotMatchException userPasswordsDoNotMatchException)
        {
            _showAlertPasswordsDoNotMatch = true;
        }
    }
    
    private void RegisterClient()
    {
        try
        {
            _controller.RegisterClient(_name,_email,_password,_passwordValidation);

            if (UserLoggedIn())
            {
                _showAlertClientRegistered = true; 
                CleanForm();
            }
            else
            {
                GoToIndex();
                CleanForm();
            }
            
        }
        catch (CannotCreateClientBeforeAdminException cannotCreateClientBeforeAdminException)
        {
            _showAlertCannotCreateClientBeforeAdmin = true; 
        }
        catch (UserAlreadyExistsException userAlreadyExistsException)
        {
            _showAlertUserAlreadyExists = true;
        }
        catch (UserPasswordsDoNotMatchException userPasswordsDoNotMatchException)
        {
            _showAlertPasswordsDoNotMatch = true;
        }
        

    }

    private void GoToIndex()
    {
        NavigationManager.NavigateTo("/", forceLoad:true);
    }

    private void CleanForm()
    {
        _name = string.Empty;
        _email = string.Empty;
        _password = string.Empty;
        _passwordValidation = string.Empty;
    }
    
}